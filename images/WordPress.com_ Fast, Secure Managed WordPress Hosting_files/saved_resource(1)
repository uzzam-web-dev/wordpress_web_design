/** @format */

( function( $ ) {
	/**
	 * H4 utilities.
	 */
	window.h4 = window.h4 || {};

	/**
	 * Higher-order debounce (like Lodash).
	 *
	 * @since 2018-12-15
	 *
	 * @param  {function} func  Function to call.
	 * @param  {number}   delay Delay in milliseconds.
	 *
	 * @return {function}       Function wrapped in debouncer.
	 */
	h4.debounce = function( func, delay ) {
		var timeout;

		return function() {
			var _this = this;
			var args = arguments;

			clearTimeout( timeout );
			timeout = setTimeout( function() {
				func.apply( _this, args );
			}, delay );
		};
	};

	/**
	 * Adjusts the height of a set of elements.
	 *
	 * @since 2019-01-24
	 *
	 * @param  {string|jQuery|HTMLElement|HTMLElement[]|object} elements jQuery selector.
	 * @param  {number} breakpoint Optional mobile breakpoint at which to adjust height.
	 */
	h4.adjustHeight = function( elements, breakpoint ) {
		var $elements = $( elements );

		if ( ! $elements.length ) {
			return; // Not applicable.
		}

		breakpoint =
			breakpoint ||
			$elements
				.first()
				.closest( '[data-adjust-height-breakpoint]' )
				.attr( 'data-adjust-height-breakpoint' ) ||
			660; // Default breakpoint.

		if ( window.innerWidth > breakpoint ) {
			var highestHeight = 0;

			$elements.each( function() {
				var currentHeight;
				var $this = $( this );

				$this.css( { 'min-height': 0 } );
				currentHeight = $this.outerHeight( true );

				if ( currentHeight > highestHeight ) {
					highestHeight = currentHeight;
				}
			} );

			$elements.each( function() {
				$( this ).css( { 'min-height': highestHeight + 'px' } );
			} );
		} else {
			$elements.each( function() {
				$( this ).css( { 'min-height': 0 } );
			} );
		}
	};

	/**
	 * Parses a URL.
	 *
	 * @since 2019-05-10
	 *
	 * @param  {string} url  Optional URL. Defaults to `document.URL`.
	 * @param  {string} base Optional base URL. Defaults to `''`.
	 *
	 * @return {URL|null}    URL object, else `null`.
	 */
	h4.parseURL = function( url, base ) {
		if ( 'function' !== typeof window.URL ) {
			return null; // Not possible.
		}
		try {
			url = url ? url.replace( /^\/\//, location.protocol + '//' ) : '';
			return new URL( url || document.URL, base );
		} catch ( error ) {
			return null; // Not possible.
		}
	};

	/**
	 * Gets a query string variable.
	 *
	 * @since 2019-04-18
	 *
	 * @param  {string} name Variable name.
	 * @param  {string} url  Optional. Defaults to `document.URL`.
	 *
	 * @return {mixed}       Value, else `null`.
	 */
	h4.getQueryVar = function( name, url ) {
		var queryVars = h4.getQueryVars( url );
		return 'undefined' === typeof queryVars[ name ] ? null : queryVars[ name ] || '';
	};

	/**
	 * Gets a query string variable.
	 *
	 * @since 2019-04-18
	 *
	 * @param  {string} name  Variable name.
	 * @param  {string} url   Optional. Defaults to `document.URL`.
	 * @param  {array}  names Optional. If given, only return these query vars.
	 *
	 * @return {mixed}        Value, else `null`.
	 */
	h4.getQueryVars = function( url, names ) {
		url = url || document.URL;
		names = names || [];

		var searchParams = {};
		var tkAmpSearchParams = {};

		if ( ! ( url = h4.parseURL( url ) ) ) {
			return {}; // Not possible.
		}
		if ( ! url.searchParams ) {
			return {};
		}

		if ( url.searchParams.has( 'tk_amp' ) ) {
			var tkAmp = url.searchParams.get( 'tk_amp' ) || '';
			tkAmpSearchParams = h4.parseAmpEncodedSearchParams( tkAmp );
		}

		url.searchParams.forEach( function( value, name ) {
			searchParams[ name ] = value;
		} );
		searchParams = $.extend( {}, tkAmpSearchParams, searchParams );

		if ( names.length ) {
			for ( var _name in searchParams ) {
				if ( -1 === names.indexOf( _name ) ) {
					delete searchParams[ _name ];
				}
			}
		}

		return searchParams;
	};

	/**
	 * Adds a variable to a URL.
	 *
	 * @since 2019-05-10
	 *
	 * @param  {string}  name            Variable name.
	 * @param  {string}  value           Variable value.
	 * @param  {string}  url             Optional. Defaults to `document.URL`.
	 * @param  {boolean} replaceExisting Optional. Defaults to `true`.
	 *
	 * @return {string}                  New URL.
	 */
	h4.addQueryVar = function( name, value, url, replaceExisting ) {
		url = url || document.URL;
		var originalURL = url;

		if ( ! ( url = h4.parseURL( url ) ) ) {
			return originalURL; // Not possible.
		}
		if ( ! url.searchParams ) {
			return originalURL;
		}
		replaceExisting = undefined === replaceExisting ? true : replaceExisting;

		if ( replaceExisting || ! url.searchParams.has( name ) ) {
			url.searchParams.set( name, value );
		}

		return url.toString();
	};

	/**
	 * Parses AMP-encoded query parameters.
	 *
	 * @since 2019-04-18
	 *
	 * @param  {string} tkAmp AMP-encode query parameters string.
	 *
	 * @return {object}       Name: value pairs.
	 */
	h4.parseAmpEncodedSearchParams = function( tkAmp ) {
		tkAmp = tkAmp
			.split( '*' )
			.filter( function( v ) {
				return v.length > 0;
			} )
			.slice( 2 );

		if ( ! tkAmp.length || 0 !== tkAmp.length % 2 ) {
			return {};
		}

		for ( var searchParams = {}, _i = 0; _i < tkAmp.length; _i += 2 ) {
			searchParams[ tkAmp[ _i ] ] = h4.urlSafeBase64DecodeString( tkAmp[ _i + 1 ] );
		}

		return searchParams;
	};

	/**
	 * Escapes regex pattern.
	 *
	 * @since 2019-05-10
	 *
	 * @param  {string} str String to escape.
	 *
	 * @return {string}     Escaped string.
	 */
	h4.escRegex = function( str ) {
		return str.replace( /[.*+?^${}()|[\]\\\-]/g, '\\$&' );
	};

	/**
	 * Escapes a jQuery selector.
	 *
	 * @since 2019-05-10
	 *
	 * @param  {string} str String to escape.
	 *
	 * @return {string}     Escaped string.
	 */
	h4.escJQSelector = function( str ) {
		return str.replace( /[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\\\$&' );
	};

	/**
	 * Escapes HTML markup.
	 *
	 * @since 2019-05-10
	 *
	 * @param  {string} str String to escape.
	 *
	 * @return {string}     Escaped string.
	 */
	h4.escHtml = function( str ) {
		var entityMap = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#39;',
		};
		return str.replace( /[&<>"']/g, function( char ) {
			return entityMap[ char ];
		} );
	};

	/**
	 * Decodes a URL-safe, base64-encoded string.
	 *
	 * @since 2019-04-18
	 *
	 * @param  {string} str URL-safe, base64-encoded string.
	 *
	 * @return {string}     Decoded string.
	 */
	h4.urlSafeBase64DecodeString = function( str ) {
		var decodeMap = {
			'-': '+',
			_: '/',
			'.': '=',
		};
		return atob(
			str.replace( /[\-_.]/g, function( c ) {
				return decodeMap[ c ];
			} )
		);
	};
} )( jQuery );
;
(function($, window, document) {
  'use strict';

  var $window = $(window);
  var scheduleFrame = window.requestAnimationFrame;

  $(function() {
    // Checking if Dynamic Type is active on iOS (type gets bigger).
    // If it is, add an appropriate class name to the `html` element so that
    // we can adjust `font-size` properties in CSS, and trigger an event that
    // other components can respond to.
    detectedDynamicType(function() {
      setClassName('js-dynamic-type-on');
      broadcastEvent('dynamic-type');
    });
  });

  function detectedDynamicType(callback) {
    var executeCallback = $.noop;
    var $testSubject = $('<div class="x-hidden" style="font:-apple-system-body"></div>').appendTo(document.body);

    scheduleFrame(function() {
      var style = window.getComputedStyle($testSubject.get(0));
      var fontFamily = style.getPropertyValue('font-family');
      var fontSize = parseInt(style.getPropertyValue('font-size'), 10);

      if (fontFamily === 'UICTFontTextStyleBody' && fontSize > 17) {
        executeCallback = function() {
          callback();
        };
      }

      scheduleFrame(function() {
        $testSubject.remove();
        executeCallback();
      });
    });
  }

  function setClassName(className) {
    document.documentElement.classList.add(className);
  }

  function broadcastEvent(name) {
    $window.trigger('x-detected.' + name);
  }
})(window.jQuery, window, document);
;
(function($) {
  'use strict';

  /*
   * Toggle the appropriate `aria` attribute. In case of `aria-hidden` being
   * set to `true`, blur all elements inside.
   */
  $.fn.xAria = function(name, value) {
    value = Boolean(value);
    this.attr('aria-' + name, value);

    if (name === 'hidden' && value) {
      // Blur all focusable elements
      this.find('[tabindex], button, input, object, select, textarea').each(function(_, element) {
        element.blur();
      });
    }
  };

  /*
   * Convert a jQuery collection into an array of separate jQuery elements.
   */
  $.fn.xToArray = function() {
    return this.toArray().map(function(element) {
      return $(element);
    });
  };

  /*
   * Return an array of a given object’s own property values.
   * An equivalent of `Object.values()`.
   */
  $.xObjectValues = function(object) {
    return Object.keys(object).map(function(key) {
      return object[key];
    });
  };

  /*
   * Create a shallow copy of the given object.
   */
  $.xCloneObject = function(object) {
    return $.extend({}, object);
  };

  /*
   * Flatten an object to a single level.
   */
  $.xFlattenObject = function xFlattenObject(object) {
    var result = {};

    $.each(object, function(key, value) {
      if (!$.isPlainObject(value)) {
        result[key] = value;
        return;
      }

      $.each(xFlattenObject(value), function(_key, _value) {
        result[key + '.' + _key] = _value;
      });
    });

    return result;
  };

  /*
   * Create an object where the jQuery elements from the passed collection
   * are grouped by a given data attribute value. The value is assumed to be
   * unique for each of the elements.
   */
  $.fn.xGroupByData = function(key) {
    var group = {};
    var data;

    this.xToArray().forEach(function($element) {
      data = $element.data(key);
      if (data) group[data] = $element;
    });

    return group;
  };

  /*
   * Translate all items inside an object to a new object.
   */
  $.xMapPlainObject = function(items, callback) {
    var isValue = !$.isFunction(callback);

    return Object.keys(items).reduce(function(memo, key) {
      var copy = {};
      copy[key] = isValue ? callback : callback(key, items[key], items);
      return $.extend({}, memo, copy);
    }, {});
  };

  /*
   * Find the maximum value in an array or an object.
   */
  $.xMax = function(items) {
    if ($.isPlainObject(items)) {
      items = $.xObjectValues(items);
    }

    return items.reduce(function(memo, value) {
      return Math.max(memo, value);
    }, 0);
  };

  /*
   * Set opacity.
   */
  $.fn.xOpacity = function(value) {
    return this.each(function() {
      this.style.opacity = value;
    });
  };

  /*
   * Set a transform value based on the coordinates and scale.
   */
  $.fn.xTransform = function(x, y, z, scale) {
    var coordinates = [x, y, z].map(function(value) {
      return value ? (value + 'px') : 0;
    });

    var value = 'translate3d(' + coordinates.join(', ') + ')';
    if ($.isNumeric(scale)) value += ' scale(' + scale + ')';

    return this.each(function() {
      this.style.transform = value;
    });
  };
})(window.jQuery, window, document);
;
(function($) {
  'use strict';

  var scheduleFrame = window.requestAnimationFrame;

  // Borrowed from Tween.js
  var EASING_FUNCTIONS = {
    linear: function(k) {
      return k;
    },
    quadraticOut: function(k) {
      return k * (2 - k);
    },
    quinticOut: function(k) {
      // Almost indistinguishable from `cubicBezier(0.1, 0.6, 0.2, 1)`
      return --k * k * k * k * k + 1;
    }
  };

  function Tween(properties) {
    this.running = false;

    this._valuesFrom = $.xCloneObject(properties.from);
    this._valuesTo = $.xCloneObject(properties.to);

    this._duration = properties.duration;
    this._ease = EASING_FUNCTIONS[properties.ease] || EASING_FUNCTIONS.linear;

    return this;
  }

  Tween.prototype.start = function(properties) {
    this._onUpdateCallback = properties.update;
    this._onEndCallback = properties.end;

    if (!$.isFunction(this._onUpdateCallback)) this._onUpdateCallback = $.noop;
    if (!$.isFunction(this._onEndCallback)) this._onEndCallback = $.noop;

    this._startAnimation();
    return this;
  };

  Tween.prototype.stop = function() {
    if (!this.running) return this;

    this._interrupted = true;
    this._endAnimation();
    return this;
  };

  Tween.prototype._startAnimation = function() {
    this.running = true;
    this._interrupted = false;
    this._start = performance.now();
    scheduleFrame(this._runAnimation.bind(this));
  };

  Tween.prototype._runAnimation = function() {
    if (!this.running) return;

    this._nextFrame();
    scheduleFrame(this._runAnimation.bind(this));
  };

  Tween.prototype._updateAnimation = function() {
    var currentValues = this._getInterpolatedValues();
    this._onUpdateCallback(currentValues, this._progress);
  };

  Tween.prototype._endAnimation = function() {
    this.running = false;

    if (!this._interrupted) {
      this._onUpdateCallback($.xCloneObject(this._valuesTo), 1);
    }

    this._onEndCallback();
  };

  Tween.prototype._nextFrame = function() {
    this._progress = (performance.now() - this._start) / this._duration;

    if (this._progress < 1) {
      this._updateAnimation();
    } else {
      this._endAnimation();
    }
  };

  Tween.prototype._getInterpolatedValues = function() {
    var values = {};

    Object.keys(this._valuesFrom).forEach(function(key) {
      var valueFrom = this._valuesFrom[key];
      var valueTo = this._valuesTo[key];

      if (!$.isNumeric(valueFrom)) valueFrom = 0;
      if (!$.isNumeric(valueTo)) valueTo = 0;

      values[key] = this._ease(this._progress) * (valueTo - valueFrom) + valueFrom;
    }.bind(this));

    return values;
  };

  // Expose the constructor
  $.xTween = function(properties) {
    return new Tween(properties);
  };
})(window.jQuery, window, document);
;
(function($, window, document) {
  'use strict';

  var $window = $(window);
  var $document = $(document);

  $(function() {
    // The main positioning element (animated)
    var $dropdown = $('.x-dropdown');

    // The background element with “animated height”
    var $dropdownBackground = $dropdown.find('.x-dropdown-bottom');
    var $dropdownBackgroundFill = $dropdownBackground.find('.x-dropdown-bottom-fill');

    // Dropdown contents, first in a jQuery collection, then as a group object
    var $dropdownContents = $dropdown.find('.x-dropdown-content');
    var dropdownContents = $dropdownContents.xGroupByData('dropdown-name');
    var dropdownContentKeys = Object.keys(dropdownContents);

    // Selectable links grouped by dropdown content key, with disabled tab switching
    var dropdownContentItems = $.xMapPlainObject(dropdownContents, function(_, $element) {
      return $element.find('[role=menuitem]:visible');
    });

    // Dropdown triggers, used for determining the attachment position
    var $dropdownTriggers = $('[data-dropdown-trigger]');
    var dropdownTriggers = $dropdownTriggers.xGroupByData('dropdown-trigger');

    // Static properties
    var dropdownHiddenOffset = -6;
    var dropdownHiddenScale = 0.85;

    // Collected element sizes and positions, etc.
    var dropdownWidth = 0;
    var dropdownBackgroundHeight = 0;
    var dropdownContentHeights = {};
    var dropdownContentOffsets = {};

    function resizeElements() {
      // Collect
      dropdownWidth = $dropdown.outerWidth();
      dropdownContentHeights = $.xMapPlainObject(dropdownContents, function(_, $element) {
        return $element.outerHeight();
      });
      dropdownBackgroundHeight = $.xMax(dropdownContentHeights);
      dropdownContentOffsets = $.xMapPlainObject(dropdownTriggers, function(_, $element) {
        var width = $element.outerWidth();
        var offset = $element.offset();
        return Math.round(offset.left + (width - dropdownWidth) / 2);
      });

      // Apply
      $dropdownBackground.height(dropdownBackgroundHeight);
      $dropdownBackgroundFill.height(dropdownBackgroundHeight);
    }

    // Current states and values
    var currentName;
    var currentDropdownOpacity;
    var currentDropdownContentOpacity = $.xMapPlainObject(dropdownContents, 0);
    var currentDropdownTransform = {};
    var currentDropdownHeight;
    var currentAnimation;
    var currentKeyboardIndex;

    function setCurrentName(name) {
      currentName = name;
      currentKeyboardIndex = false;
      $.each(dropdownContents, function(key, $element) {
        $element.xAria('hidden', key !== name);
      });
    }

    function broadcastEvent(type, name, data) {
      data = $.extend(data || {}, { name: name });
      $document.trigger('x-dropdown.' + type, data);
    }

    // Animated properties
    function updateDropdownOpacity(value, forceUpdate) {
      if (!forceUpdate && value === currentDropdownOpacity) {
        return;
      }
      $dropdown.xOpacity(value);
      currentDropdownOpacity = value;
    }

    function updateDropdownContentOpacity(values, forceUpdate) {
      dropdownContentKeys.forEach(function(key) {
        var value = values['contents.opacity.' + key];
        if (!forceUpdate && value === currentDropdownContentOpacity[key]) {
          return;
        }
        dropdownContents[key].xOpacity(value);
        currentDropdownContentOpacity[key] = value;
      });
    }

    function updateDropdownTransform(values, forceUpdate) {
      var x = values.x || 0;
      var y = values.y || 0;
      var scale = values.scale;
      var current = currentDropdownTransform;

      if (!forceUpdate && current.x === x && current.y === y && current.scale === scale) {
        return;
      }
      $dropdown.xTransform(x, y, 0, scale);
      currentDropdownTransform = { x: x, y: y, scale: scale };
    }

    function updateDropdownHeight(value, forceUpdate) {
      value = Math.min(value, dropdownBackgroundHeight);
      if (!forceUpdate && value === currentDropdownHeight) {
        return;
      }
      $dropdownBackgroundFill.xTransform(0, value - dropdownBackgroundHeight);
      currentDropdownHeight = value;
    }

    function updateDropdownProperties(values, forceUpdate) {
      updateDropdownOpacity(values['dropdown.opacity'], forceUpdate);
      updateDropdownContentOpacity(values, forceUpdate);
      updateDropdownTransform({ x: values['dropdown.transform.x'], y: values['dropdown.transform.y'], scale: values['dropdown.transform.scale'] }, forceUpdate);
      updateDropdownHeight(values['dropdown.height'], forceUpdate);
    }

    function show(name, animate) {
      // Treat unavailable dropdown names as close calls
      if (dropdownContentKeys.indexOf(name) < 0) {
        name = false;
      }

      // Abort if the state remains unchanged
      if (currentName === name) {
        return;
      }

      // If there is an animation running, stop it
      if (currentAnimation) {
        currentAnimation.stop();
      }

      // State helpers
      var isHidden = !currentName && !(currentAnimation && currentAnimation.running);
      var isHiding = !name;

      // Define from-to states for each of the animated properties
      var animationFrom = {
        dropdown: isHidden ? {
          height: dropdownContentHeights[name],
          opacity: currentDropdownOpacity,
          transform: {
            x: dropdownContentOffsets[name],
            y: dropdownHiddenOffset,
            scale: dropdownHiddenScale
          }
        } : {
          height: currentDropdownHeight,
          opacity: currentDropdownOpacity,
          transform: currentDropdownTransform
        },
        contents: {
          opacity: isHidden ? $.xMapPlainObject(currentDropdownContentOpacity, 0) : currentDropdownContentOpacity
        }
      };

      var animationTo = {
        dropdown : isHiding ? {
          height: currentDropdownHeight,
          opacity: 0,
          transform: {
            x: currentDropdownTransform.x,
            y: dropdownHiddenOffset,
            scale: dropdownHiddenScale
          }
        } : {
          height: dropdownContentHeights[name],
          opacity: 1,
          transform: {
            x: dropdownContentOffsets[name],
            y: 0,
            scale: 1
          }
        },
        contents: {
          opacity: isHiding ? currentDropdownContentOpacity : $.xMapPlainObject(currentDropdownContentOpacity, function(key) {
            return name === key ? 1 : 0;
          })
        }
      };

      var animationProperties = {
        from: $.xFlattenObject(animationFrom),
        to: $.xFlattenObject(animationTo),
        duration: isHiding ? 150 : 450,
        ease: isHiding ? 'quadraticOut' : 'quinticOut'
      };

      setCurrentName(name);

      if (!animate) {
        updateDropdownProperties(animationProperties.to);
      } else {
        currentAnimation = $.xTween(animationProperties).start({
          update: updateDropdownProperties,
          complete: function() {
            currentAnimation = false;
          }
        });
      }
    }

    // Trigger element calculations and handle browser events
    function handleResize() {
      show(false);
      resizeElements();
    }

    function handleLoad() {
      resizeElements();
    }

    function handleScroll() {
      show(false, true);
    }

    handleResize();
    $window.on('resize', handleResize);
    $window.on('load', handleLoad);
    $window.on('scroll', handleScroll);
    $window.on('x-detected.dynamic-type', handleResize);

    // Handle events sent by other components
    $document.on('x-trigger.select', function(_, data) {
      show(data.name, true);
    });

    $document.on('x-trigger.arrow-down', function() {
      if ($.isNumeric(currentKeyboardIndex)) {
        currentKeyboardIndex += 1;
      } else {
        currentKeyboardIndex = 0;
      }
    });

    $document.on('x-trigger.arrow-up', function() {
      if ($.isNumeric(currentKeyboardIndex)) {
        currentKeyboardIndex -= 1;
      } else {
        currentKeyboardIndex = -1;
      }
    });

    // Handle keyboard focus
    $document.on('x-trigger.arrow-up x-trigger.arrow-down', function() {
      var items = dropdownContentItems[currentName];
      var length = items.length;
      var index = (currentKeyboardIndex + length) % length;
      var element = items[index];
      if (element) element.focus();
      currentKeyboardIndex = index;
    });

    // Broadcast mouse events to other components
    $.each(dropdownContents, function(key, $element) {
      ['mouseenter', 'mouseleave'].forEach(function(type) {
        $element.on(type, function() {
          broadcastEvent(type, key);
        });
      });
    });
  });
})(window.jQuery, window, document);
;
(function($, document) {
  'use strict';

  var $document = $(document);

  $(function() {
    // The outer element, the content element, and the close button
    var $menu = $('.x-menu');
    var $menuContent = $menu.find('.x-menu-content');
    var $menuButton = $menu.find('.x-menu-button');

    // The menu trigger
    var $menuTrigger = $('.x-nav-link--menu');

    // Selectable menu items
    var $menuContentItems = $menuContent.find('[role=menuitem]:visible');
    var menuContentItemLength = $menuContentItems.length;

    // Widget init state
    var widgetActive = false;

    // Current states and values
    var currentState = false;
    var currentKeyboard = false;
    var currentKeyboardIndex = false;

    function activateWidget(delay) {
      setTimeout(function() {
        if (widgetActive) {
          return;
        }
        $menu.addClass('x-menu--active');
        widgetActive = true;
      }, delay || 0);
    }

    function moveItemIndex(increment) {
      var index = 0;
      var element;

      if ($.isNumeric(currentKeyboardIndex)) {
        index = currentKeyboardIndex;
      } else if (increment > 0) {
        index = -1;
      }

      index = (index + increment + menuContentItemLength) % menuContentItemLength;
      element = $menuContentItems[index];

      if (element) element.focus();
      currentKeyboardIndex = index;
    }

    function captureArrows() {
      if (currentKeyboard) {
        return;
      }

      currentKeyboard = true;
      currentKeyboardIndex = false;

      $document.on('keydown.x-menu', function($event) {
        var triggerActive = $menuTrigger.get(0) === document.activeElement;

        /* eslint-disable default-case */
        switch ($event.which) {
          case 38: // ↑
          case 37: // ←
            $event.preventDefault();
            moveItemIndex(-1);
            break;
          case 40: // ↓
          case 39: // →
            $event.preventDefault();
            moveItemIndex(1);
            break;
          case 27: // escape
            if (!triggerActive) {
              $menuTrigger.trigger('focus.x-menu');
            }
            setCurrentState(false);
            break;
          case 9: // tab
            if (!triggerActive) {
              $event.preventDefault();
              $menuTrigger.trigger('focus.x-menu');
            }
            setCurrentState(false);
            break;
          /* eslint-enable default-case */
        }
      });
    }

    function releaseArrows() {
      currentKeyboard = false;
      $document.off('keydown.x-menu');
    }

    function setCurrentState(state) {
      if (!widgetActive || state === currentState) {
        return;
      }

      currentState = state;

      if (state) {
        captureArrows();
      } else {
        releaseArrows();
      }

      $menuTrigger.xAria('expanded', state);
      $menu.xAria('hidden', !state);
      $menu.toggleClass('x-menu--open', state);
    }

    activateWidget();

    // Handle events
    $menuTrigger.on('click.x-menu', function($event) {
      if (!widgetActive) {
        return;
      }
      $event.stopPropagation();
      $menuTrigger.blur();
      setCurrentState(true);
    });

    $menuButton.on('click.x-menu', function() {
      if (!widgetActive) {
        return;
      }
      $menuButton.blur();
      setCurrentState(false);
    });

    $menuContent.on('click.x-menu touchstart.x-menu', function($event) {
      if (!widgetActive) {
        return;
      }
      $event.stopPropagation();
    });

    // Handle dismissal
    $document.on('click.x-menu touchstart.x-menu', function() {
      if (!widgetActive) {
        return;
      }
      setCurrentState(false);
    });
  });
})(window.jQuery, document);
;
(function($, window, document) {
  'use strict';

  var $window = $(window);
  var $document = $(document);

  $(function() {
    // Triggers, first in a jQuery collection, then as a group object
    var $triggers = $('[data-dropdown-trigger]');
    var triggers = $triggers.xGroupByData('dropdown-trigger');

    // Current states and values
    var currentName;
    var currentTimeout;
    var currentKeyboard;

    function setCurrentName(name) {
      currentName = name;
      $.each(triggers, function(key, $element) {
        $element.xAria('expanded', key === name);
      });
    }

    function broadcastEvent(type, name, data) {
      data = $.extend(data || {}, { name: name });
      $document.trigger('x-trigger.' + type, data);
    }

    function captureArrows() {
      if (currentKeyboard) {
        return;
      }

      currentKeyboard = true;

      $document.on('keydown.x-trigger', function($event) {
        var $trigger = triggers[currentName];
        var triggerActive = $trigger && $trigger.get(0) === document.activeElement;

        /* eslint-disable default-case */
        switch ($event.which) {
          case 38: // ↑
          case 37: // ←
            $event.preventDefault();
            broadcastEvent('arrow-up', currentName);
            break;
          case 40: // ↓
          case 39: // →
            $event.preventDefault();
            broadcastEvent('arrow-down', currentName);
            break;
          case 27: // escape
            if (!triggerActive) {
              $trigger.trigger('focus.x-trigger');
            }
            show(0, false, { keyboard: true });
            break;
          case 9: // tab
            if (!triggerActive) {
              $event.preventDefault();
              $trigger.trigger('focus.x-trigger');
            }
            show(0, false, { keyboard: true });
            break;
          /* eslint-enable default-case */
        }
      });
    }

    function releaseArrows() {
      currentKeyboard = false;
      $document.off('keydown.x-trigger');
    }

    function show(delay, name, data) {
      var callback = function() {
        setCurrentName(name);
        broadcastEvent('select', name, data);

        if (name) {
          captureArrows();
        } else {
          releaseArrows();
        }
      };

      clearTimeout(currentTimeout);
      currentTimeout = setTimeout(callback, delay);
    }

    // Trigger logic
    $.each(triggers, function(key, $element) {
      $element.on('click.x-trigger touchstart.x-trigger', function($event) {
        $event.stopPropagation();
        $event.target.blur();
        show(0, key);
      });

      $element.on('focus.x-trigger', function() {
        show(0, key, { keyboard: true });
      });

      $element.on('mouseenter.x-trigger', function() {
        show(currentName ? 0 : 150, key);
      });

      $element.on('mouseleave.x-trigger', function() {
        show(50, false);
      });
    });

    // Handle events sent by other components
    $document.on('x-dropdown.mouseenter', function(_, data) {
      show(0, data.name);
    });

    $document.on('x-dropdown.mouseleave', function() {
      show(350, false);
    });

    // Handle dismissal
    $document.on('click.x-trigger', function() {
      show(50, false);
    });

    // Reset the state on resize
    function handleResize() {
      show(0, false);
    }

    handleResize();
    $window.on('resize', handleResize);
  });
})(window.jQuery, window, document);
;
/** @format */

( function( $ ) {
	'use strict';

	$( document ).ready( function() {
        if ( ! $( '.lpc-plans-interval-type-toggle .lpc-toggle-option' ).length ) {
            return;
        }
		$( '.lpc-plans-interval-type-toggle .lpc-toggle-option' ).on( 'click', function( e ) {
			e.preventDefault();
			const $selectedOption = $(this);
			$selectedOption.parent().children().removeAttr( 'selected' );
			$selectedOption.attr( 'selected', true );
			var intervalType = $selectedOption.attr( 'option' );
			$( '.lpc-plans-table.plans-table' ).attr( 'class', 'lpc-plans-table plans-table ' + ( intervalType == 'annual' ? 'lpc-plans-table-interval-type-month-hide' : 'lpc-plans-table-interval-type-annual-hide' ) );
			if ( window && window._tkq ) {
				window._tkq.push( [ 'recordEvent', 'wpcom_landing_pages_interval_type_toggle', {
					'interval_type': intervalType
				}] )
			}
		} )
	} );
} )( window.jQuery );
;
( function( $ ) {
	"use strict";

	if ( window.homepage && ! homepage.overriden_prices ) {
		return;
	}

	const noop = () => {};
	const store = window.localStorage || { getItem: noop, setItem: noop };
	const storageKeyMessage = 'marketing_messages';
	const storageKeyDismissed = 'marketing_messages_dismissed';
	const MINUTES_IN_MS = 60 * 1000;

	function getCached() {
		return JSON.parse( store.getItem( storageKeyMessage ) || '{ "valid_until": 0 }' );
	}

	function getDismissed() {
		return JSON.parse( store.getItem( storageKeyDismissed ) || '[]' );
	}

	function removeDismissedMessages( messages ) {
		const dismissed = getDismissed();
		return messages.filter( ( msg ) => ! dismissed.includes( msg.id ) );
	}

	async function getMessages() {
		const cached = getCached();
		const locale = document.documentElement.lang || 'en';

		if ( cached.valid_until > Date.now() && cached.messages && locale === cached.locale ) {
			return cached.messages;
		}

		try {
			const res = await fetch(
				'https://public-api.wordpress.com/rest/v1/marketing/messages?locale=' + locale,
				{
					mode: 'cors',
					credentials: 'include',
					cache: 'no-cache',
				}
			);
			const data = await res.json();

			const validUntil = Date.parse( data.valid_until );
				store.setItem(
					storageKeyMessage,
					JSON.stringify( {
						valid_until: validUntil,
						locale: locale,
						messages: removeDismissedMessages( data.messages ),
					} )
				);

				return data.messages;
		} catch (e) {
			// If the request fails, do not try again for 30 minutes.
			store.setItem(
				storageKeyMessage,
				JSON.stringify( {
					valid_until: Date.now() + 30 * MINUTES_IN_MS,
					locale: locale,
					messages: [],
				} )
			);
		}

		return [];
	}

	function dismiss( id ) {
		const cached = getCached();
		const dismissed = getDismissed();

		store.setItem(
			storageKeyDismissed,
			JSON.stringify( [ ...new Set( dismissed.concat( id ) ) ] )
		);

		store.setItem(
			storageKeyMessage,
			JSON.stringify( {
				...cached,
				messages: cached.messages.filter( msg => msg.id !== id ),
			} )
		);
	}

	function render( messages, $tpl, $container ) {
		$( document.body ).toggleClass( 'has-marketing-message', !! messages.length );

		$container.empty();

		messages.forEach( ( msg ) => {
			const $msg = $tpl.clone();

			$msg.find( 'p' ).text( msg.text );
			$msg.find( 'button' ).on( 'click', () => {
				dismiss( msg.id );
				render( getCached().messages, $tpl, $container );
			} );

			$msg.appendTo( $container );
		} );
	}

	const promisedMessages = getMessages();

	$( function() {
		const $container = $( '#lpc-international-discounts-banner' );
		const $tpl = $( $container.find('template').html() ).remove();
		
		promisedMessages.then( msgs => {
			render( msgs, $tpl, $container );
		} );
	} );
} )( window.jQuery );;
!function(){"use strict";if("undefined"!=typeof window){var t=window.navigator.userAgent.match(/Edge\/(\d{2})\./),e=!!t&&parseInt(t[1],10)>=16;if("objectFit"in document.documentElement.style!=!1&&!e)return void(window.objectFitPolyfill=function(){return!1});var i=function(t){var e=window.getComputedStyle(t,null),i=e.getPropertyValue("position"),n=e.getPropertyValue("overflow"),o=e.getPropertyValue("display");i&&"static"!==i||(t.style.position="relative"),"hidden"!==n&&(t.style.overflow="hidden"),o&&"inline"!==o||(t.style.display="block"),0===t.clientHeight&&(t.style.height="100%"),-1===t.className.indexOf("object-fit-polyfill")&&(t.className=t.className+" object-fit-polyfill")},n=function(t){var e=window.getComputedStyle(t,null),i={"max-width":"none","max-height":"none","min-width":"0px","min-height":"0px",top:"auto",right:"auto",bottom:"auto",left:"auto","margin-top":"0px","margin-right":"0px","margin-bottom":"0px","margin-left":"0px"};for(var n in i){e.getPropertyValue(n)!==i[n]&&(t.style[n]=i[n])}},o=function(t,e,i){var n,o,l,a,d;if(i=i.split(" "),i.length<2&&(i[1]=i[0]),"x"===t)n=i[0],o=i[1],l="left",a="right",d=e.clientWidth;else{if("y"!==t)return;n=i[1],o=i[0],l="top",a="bottom",d=e.clientHeight}return n===l||o===l?void(e.style[l]="0"):n===a||o===a?void(e.style[a]="0"):"center"===n||"50%"===n?(e.style[l]="50%",void(e.style["margin-"+l]=d/-2+"px")):n.indexOf("%")>=0?(n=parseInt(n),void(n<50?(e.style[l]=n+"%",e.style["margin-"+l]=d*(n/-100)+"px"):(n=100-n,e.style[a]=n+"%",e.style["margin-"+a]=d*(n/-100)+"px"))):void(e.style[l]=n)},l=function(t){var e=t.dataset?t.dataset.objectFit:t.getAttribute("data-object-fit"),l=t.dataset?t.dataset.objectPosition:t.getAttribute("data-object-position");e=e||"cover",l=l||"50% 50%";var a=t.parentNode;i(a),n(t),t.style.position="absolute",t.style.height="100%",t.style.width="auto","scale-down"===e&&(t.style.height="auto",t.clientWidth<a.clientWidth&&t.clientHeight<a.clientHeight?(o("x",t,l),o("y",t,l)):(e="contain",t.style.height="100%")),"none"===e?(t.style.width="auto",t.style.height="auto",o("x",t,l),o("y",t,l)):"cover"===e&&t.clientWidth>a.clientWidth||"contain"===e&&t.clientWidth<a.clientWidth?(t.style.top="0",t.style.marginTop="0",o("x",t,l)):"scale-down"!==e&&(t.style.width="100%",t.style.height="auto",t.style.left="0",t.style.marginLeft="0",o("y",t,l))},a=function(t){if(void 0===t)t=document.querySelectorAll("[data-object-fit]");else if(t&&t.nodeName)t=[t];else{if("object"!=typeof t||!t.length||!t[0].nodeName)return!1;t=t}for(var i=0;i<t.length;i++)if(t[i].nodeName){var n=t[i].nodeName.toLowerCase();"img"!==n||e?"video"===n&&(t[i].readyState>0?l(t[i]):t[i].addEventListener("loadedmetadata",function(){l(this)})):t[i].complete?l(t[i]):t[i].addEventListener("load",function(){l(this)})}return!0};document.addEventListener("DOMContentLoaded",function(){a()}),window.addEventListener("resize",function(){a()}),window.objectFitPolyfill=a}}();
;
/** @format */

( function( $ ) {
	'use strict';

	$( document ).ready( function() {
		$( '.block-hero-images img' )
			.load()
			.fadeIn( 1500 );
	} );

	$( window ).load( function() {
		var $window = $( window );
		var currentSlide = 0;
		var $slides = $( '.slideshow-slide' );

		var setCurrentSlide = function() {
			requestAnimationFrame( doSetCurrentSlide );
		};
		var doSetCurrentSlide = function() {
			$( $slides[ currentSlide ] ).removeClass( 'slideshow-current' );

			currentSlide = ( currentSlide + 1 ) % $slides.length;
			$( $slides[ currentSlide ] ).addClass( 'slideshow-current' );

			setTimeout( setCurrentSlide, 3500 );
		};
		setTimeout( setCurrentSlide, 3500 );

		$( '.lpc-video.lazy video' ).each( function( i, video ) {
			var $video = $( video );

			if ( $window.width() <= 480 ) {
				$video.find( 'source[src], source[data-desktop-src]' ).remove();
				$video.find( 'source[data-mobile-src]' ).each( function( i, source ) {
					var $source = $( source );
					$source.attr( 'src', $source.data( 'mobileSrc' ) );
				} );
			} else {
				$video.find( 'source[src], source[data-mobile-src]' ).remove();
				$video.find( 'source[data-desktop-src]' ).each( function( i, source ) {
					var $source = $( source );
					$source.attr( 'src', $source.data( 'desktopSrc' ) );
				} );
			}
			video.load();
			video.play();
		} );

		$( '.security-image-wrapper .lpc-picture-fill picture' ).each( function( i, picture ) {
			var $picture = $( picture );

			$picture.find( '> *' ).each( function( i, element ) {
				var $element = $( element );
				var src = $element.attr( 'src' );
				var srcset = $element.attr( 'srcset' );

				if ( src ) {
					$element.attr( 'src', src.replace( /\.jpg($|[?#])/gi, '.gif$1' ) );
				}
				if ( srcset ) {
					$element.attr( 'srcset', srcset.replace( /\.jpg($|[\s?#])/gi, '.gif$1' ) );
				}
			} );
			$picture.replaceWith( $picture );
		} );
	} );
} )( window.jQuery );
;
/**
 * A class to log JS errors to Kibana
 * @class
 *
 * @constructor
 *
 * @property event the event object
 * @property feature the feature property on the API endpoint
 */
( function() {
	function LogErrors( event, feature ) {
		this.event = event || window.event;
		this.feature = feature || '';
	}

	/**
	 * Makes POST request to js-errors public API endpoint
	 */
	LogErrors.prototype.logToEndpoint = function() {
		var xhr = new XMLHttpRequest();
		var errorData = JSON.stringify( {
			feature: this.feature,
			message: 'Error Message: "' + this.event.message + '"'
				+ '\nLine Number: ' + this.event.lineno
				+ '\nURL: ' + this.event.target.location.href
				+ '\nFile: ' + this.event.filename,
		} );
		var params = 'error=' + encodeURIComponent( errorData );

		xhr.onreadystatechange = function() {
			if ( xhr.readyState === 4 && xhr.status === 200 ) {
				console.log( 'The JavaScript errors have successfully been reported.' );
			}
		}
		xhr.open( 'POST', 'https://public-api.wordpress.com/rest/v1.1/js-error', true );
		xhr.setRequestHeader( 'Content-type', 'application/x-www-form-urlencoded' );
		xhr.send( params );
	};

	/**
	 * Instantiates LogErrors and fires off call to endpoint,
	 * removing itself after executed once.
	 *
	 * @property event the event object
	 */
	var handleInitialError = function( event ) {
		if ( event.message && 0 === event.message.toLowerCase().indexOf( 'script error' ) && ! event.filename ) {
			return;
		}

		var errors = new LogErrors( event, 'h4_js_errors' );
		errors.logToEndpoint();

		window.removeEventListener( 'error', handleInitialError );
	};

	/**
	 * Attach handleInitialError to 'error' event
	 */
	window.addEventListener( 'error', handleInitialError );
} )();

;
